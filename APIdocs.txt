note: All data sent through the endpoints must be json encoded
      url prefixing each endpoint is 'https://unikribbackend-trhm.onrender.com/unikrib'
      All images transfered must use formData (see the '/upload-image' endpoint for details)
      All images must first be sent to the '/upload-image' endpoint which returns the url that can be stored
      Login and signup requests always return an authorization token, this should be stored on the client side
      Any subsequent request after log in must contain the header: "Authorization: unikrib <token>"

CATEGORY (Products):
        --> GET, '/categories': This returns a list of all categories
                res: [
                        {
                            "__class__": "Category", 
                            "created_at": "2023-02-03T12:37:55", 
                            "id": "123456789", 
                            "name": "Bed and Beddings", 
                            "updated_at": "2023-02-03T12:37:55",
                            "image_url": "https://1234567890.jpg"
                        },
                        ...
                    ]
        --> GET, '/categories/<category_id>': This returns a particular category based on the inputted id
                res: {
                        "__class__": "Category", 
                        "created_at": "2023-02-03T12:37:55", 
                        "id": "123456789", 
                        "name": "Bed and Beddings", 
                        "updated_at": "2023-02-03T12:37:55",
                        "image_url": "https://1234567890.jpg"
                    }

CATEGORY (services):
        --> GET, '/service-categories': This returns a list of all the service categories
            res: [
                    {
                        "__class__": "ServiceCategory", 
                        "created_at": "2023-03-31T17:39:55", 
                        "id": "123456789", 
                        "name": "AC Installer", 
                        "updated_at": "2023-03-31T17:39:55"
                    },
                    ...
                ]
        --> GET, '/service-categories/<category_id>': This returns a category based on id
                res: {
                        "__class__": "ServiceCategory", 
                        "created_at": "2023-03-31T17:39:55", 
                        "id": "123456789", 
                        "name": "AC Installer", 
                        "updated_at": "2023-03-31T17:39:55"
                    }

ENVIRONMENT (community of residence):
        --> GET, '/environments': This returns a list of all environments.
                res: [
                        {
                            "__class__": "Environment", 
                            "created_at": "2023-02-03T12:37:55", 
                            "id": "123456789", 
                            "name": "Adolor",
                            "school_id": "1234567890",
                            "updated_at": "2023-02-03T12:37:55"
                        },
                        ...
                    ]
        --> GET, '/environments/<environment_id>': This returns a particular environment based on inputted id
                res: {
                        "__class__": "Environment", 
                        "created_at": "2023-02-03T12:37:55", 
                        "id": "123456789", 
                        "name": "Adolor",
                        "updated_at": "2023-02-03T12:37:55"
                    }
        --> GET, '/school/<school_id>/environments': This returns all the environments in a school
                res: [
                        {
                                "__class__":"Environment",
                                "created_at":"2023-06-16T02:24:23",
                                "id":"09a1f9b1-dfbd-4b70-bda0-c63614c98cea",
                                "name":"Adolor",
                                "school_id":"51eba9c6-e217-4be5-8661-671802327121",
                                "updated_at":"2023-06-16T02:24:23"
                        }
                        ...
                ]

HOUSE (apartments):
        --> GET, '/houses': This returns a list of all houses.
                res: [
                        {
                                "__class__":"House",
                                "agent_fee":null,
                                "apartment":"Self-contain",
                                "created_at":"2024-02-15T10:41:14",
                                "daily_power":12,
                                "features":"less than 10 minutes from school gate",
                                "id":"1a689353-3e02-4673-8e4e-466905402a6a",
                                "image1":"https://res.cloudinary.com/deg1j9wbh/image/upload/v1707993690/apartment-images/1a689353-3e02-4673-8e4e-466905402a6aone.jpg",
                                "image2":"https://res.cloudinary.com/deg1j9wbh/image/upload/v1707993687/apartment-images/1a689353-3e02-4673-8e4e-466905402a6atwo.jpg",
                                "image3":"https://res.cloudinary.com/deg1j9wbh/image/upload/v1707993683/apartment-images/1a689353-3e02-4673-8e4e-466905402a6athree.jpg",
                                "name":"Greenville hostel",
                                "newly_built":false,
                                "no_clicks":5,
                                "owner_id":"e12f7964-c20e-4335-962a-cb14a812affb",
                                "price":250000,
                                "rooms_available":1,
                                "running_water":"yes",
                                "security_available":false,
                                "street_id":"f2ad8ca3-2e6f-4102-b4ca-ca59fa74347f",
                                "tiled": true,
                                "updated_at":"2024-02-21T22:43:00",
                                "waste_disposal":["yes" | "no"],
                                "balcony": [true | false],       (default = true)
                                "furnished": [true | false]     (default = false)
                                "env_id": the community id,
                                "school_id": 
                        }
                        ...
                    ]
                requests can also include a query string for pagination. eg:
                '/houses?limit=12&cursor=123456789&nav='prev'
                where: "limit" is number of houses to be returned
                        "cursor" (optional) is the id of last house where limit is to be counted from, starts from the first apartment if absent
                        "nav" (optional) is the str indicating whether to count forward or backwards, can be 'prev' meaning backwards. Counts forward by default
        --> *GET, '/houses/<house_id>': This returns a houses based on inputted id
                res: {
                        "__class__":"House",
                        "agent_fee":null,
                        "apartment":"Self-contain",
                        "created_at":"2024-02-15T10:41:14",
                        "daily_power":12,
                        "features":"less than 10 minutes from school gate",
                        "id":"1a689353-3e02-4673-8e4e-466905402a6a",
                        "image1":"https://apartment-images/1a689353-3e02-4673-8e4e-466905402a6aone.jpg",
                        "image2":"https://apartment-images/1a689353-3e02-4673-8e4e-466905402a6atwo.jpg",
                        "image3":"https://apartment-images/1a689353-3e02-4673-8e4e-466905402a6athree.jpg",
                        "name":"Greenville hostel",
                        "newly_built":false,
                        "no_clicks":5,
                        "owner_id":"e12f7964-c20e-4335-962a-cb14a812affb",
                        "price":250000,
                        "rooms_available":1,
                        "running_water":"yes",
                        "security_available":false,
                        "street_id":"f2ad8ca3-2e6f-4102-b4ca-ca59fa74347f",
                        "tiled": true,
                        "updated_at":"2024-02-21T22:43:00",
                        "waste_disposal":["yes" | "no"],
                        "balcony": [true | false],       (default = true)
                        "furnished": [true | false]     (default = false)
                }
        --> *GET, '/users/<user_id>/houses': This returns a list of all the houses registered under an agent
                if user_id = "me" (ie. '/users/me/houses') then only houses registered under the requester will be returned
                res: * same as '/houses' *
        --> *POST, '/houses': This uploads a new apartment to server
                req: price*: int
                    apartment*: str ['Single-room' | 'Self-contain' | 'One-bedroom' | 'Two-bedroom' | 'Three-bedroom']
                    name*: str
                    env_id*: id (*optionally defaults to the uploader community of residence if not provided)
                    running_water: str ['yes' | 'no']
                    waste_disposal: str ['yes' | 'no']
                    newly_built: Boolean [true | false]
                    tiled: Boolean [true | false]
                    rooms_available: int [default=1]
                    security_available: Boolean
                    balcony: Boolean
                    furnished: Boolean
                    image1*: href (* as gotten from the '/upload_image' endpoint *)
                    image2: href (* as gotten from the '/upload_image' endpoint *)
                    image3: href (* as gotten from the '/upload_image' endpoint *)
                    owner_id*: id,
                    agent_fee: int [optional]
                    features: str (A description of the apartment)

                    * required parameters

                res: * same as '/houses/<house_id>' *
        --> *PUT, '/houses/<house_id>': This updates an apartment details
                req: {
                        key1: value1,
                        key2: value2,
                        ...
                    }
                res: * same as '/houses/<house_id>' *
        --> *DELETE, '/houses/<house_id>': This delete an apartment instance
                res: '{}'
        --> POST, '/houses/search': This searches the server for apartments that matches some criteria
                req: {
                        env_id: "123456789",
                        apartment: str ['Single-room' | 'Self-contain' | 'One-bedroom' | 'Two-bedroom' | 'Three-bedroom'],
                        min_price: int (eg. 30000),
                        max_price: int (eg. 60000)
                    }
                res: * same as '/houses'
        --> GET, '/get-trending-apartments': This returns the top 5 trending apartments
                res: * same as '/houses'

INDEX:
        --> GET, '/status': This check if the backend APIs are active
                res: {'status': 'ok'}
        --> GET, '/count/<object>': This returns the number of objects
                if object == 'products' | 'services' | 'houses':
                    res: int (example: 10)
                elif object == 'users':
                    res: {'agent': 10, 'vendors': 10, 'sp': 10}

PRODUCT:
        --> GET, '/products': This returns a list of all products
                res: [
                        {
                            "__class__": "Product", 
                            "available": "yes", 
                            "category_id": "123456789", 
                            "created_at": "2023-02-05T23:42:51", 
                            "delivery": "no", 
                            "features": "This is the best product", 
                            "id": "123456789", 
                            "image1": "https://example.jpg", 
                            "image2": "https://example.jpg", 
                            "image3": "https://example.jpg", 
                            "name": "Apple watch", 
                            "owner_id": "123456789", 
                            "price": 15000, 
                            "updated_at": "2023-03-02T05:29:05"
                        },
                        ...
                    ]
                requests can also come with query strings
                '/products?available=yes&limit=12&cursor=123456789&nav=prev
                    where: 'available' if set to 'yes' returns only products that are in-stock and if set to 'no' returns all products. Default value is yes
                    'limit' is number of products to be returned
                    'cursor' (optional) is the id of last product where limit is to be counted from, starts from the first if absent
                    'nav' (optional) is the str indicating whether to count forward or backwards, can be 'prev' meaning backwards. It counts forward by default
        --> *GET, '/products/<product_id>' : This returns a product based on id
                res: {
                        "__class__": "Product", 
                        "available": "yes", 
                        "category_id": "123456789", 
                        "created_at": "2023-02-05T23:42:51", 
                        "delivery": "no", 
                        "features": "This is the best product", 
                        "id": "123456789", 
                        "image1": "https://example.jpg", 
                        "image2": "https://example.jpg", 
                        "image3": "https://example.jpg", 
                        "name": "Apple watch", 
                        "owner_id": "123456789", 
                        "price": 15000,
                        "updated_at": "2023-03-02T05:29:05"
                    }
        --> GET, '/categories/<category_id>/products': This returns a list of all products in a Category
                res: * same as '/products'
        --> *GET, '/users/<user_id>/products': This returs a list of all products posted by a vendor
                res: * same as '/products'
        --> *POST, '/products': This creates a product
                req: {
                        "name": str,
                        "price": int,
                        "delivery": str ["yes" | "no"],
                        "features": str,
                        "image1" : href,
                        "image2": href,
                        "image3": href,
                        "available": str ["yes" | "no"],
                        "owner_id": id,
                        "category_id": id
                    }
                res: * same as '/products/<product_id>' *
        --> *PUT: '/products/<product_id>': This update details of a product
                req: {
                        key1: value1,
                        key2: value2,
                        ...
                    }
                res: * same as '/products/<product_id>' *
        --> POST: '/product-search': This search for products based on certain criteria
                req: {
                        "location": id | "all",
                        "category": id | "all",
                        "query": str
                    }
                    Note: "location" and "category" should be the either the id of the interested environment/category or the string "all" to fetch product from all locations/category
                res: * same as '/products/<product_id>' *
        --> DELETE: '/products/<product_id>: This delete a product
                res: {}

REPORT:
        --> *POST, '/reports': This creates a report
                req: {
                        "topic": str. A general summary of the report,
                        "description": str. A detailed report
                        "reporter": str. The id of the reporter
                        "reported": str. The id of the reported
                }
                res: {
                        "topic": "Fraud",
                        "description": "This agent collected double the rent from me",
                        "reporter": "1234567890",
                        "reported": "0987654321"
                }

REVIEW:
        --> GET, '/reviews': This returns a list of all reviews
                res: [
                        {
                            "__class__": "Review", 
                            "created_at": "2023-02-09T07:33:05", 
                            "id": "123456789", 
                            "reviewee": "123456789", 
                            "reviewer": "123456789", 
                            "star": "5", 
                            "text": "I got exactly what I wanted from him. And he was also honest", 
                            "updated_at": "2023-02-09T07:33:05"
                        },
                        ...
                    ]
        --> GET, '/users/<user_id>/reviews': This returns a list of all reviews for a user
                res: * same as '/reviews'
        --> *POST, '/reviews': This creates a new review
                req: {
                        "text": str,
                        "reviewee": id,
                        "star": int [5 | 4 | 3 | 2 | 1]
                    }
                res: {
                        "__class__": "Review", 
                        "created_at": "2023-02-09T07:33:05", 
                        "id": "123456789", 
                        "reviewee": "123456789", 
                        "reviewer": "123456789", 
                        "star": "5", 
                        "text": "I got exactly what I wanted from him. And he was also honest", 
                        "updated_at": "2023-02-09T07:33:05"
                    }

SCHOOL:
        --> GET, '/schools': This returns a list of all schools
                res:    [
                                {
                                        'name': 'UniBen',
                                        'full_name': 'University of Benin',
                                        'image_url': 'https://1234567890.jpg',
                                        'id': '1234567890ABCDEF',
                                        'created_at': '2024-02-14T19:57:47',
                                        'updated_at': '2024-02-14T19:57:47',
                                        'city': 'Benin city',
                                        '__class__': 'School'
                                }
                                ...
                ]
        --> GET, '/schools/<school_id>: This returns a school by id
                res:    {
                                'name': 'UniBen',
                                'full_name': 'University of Benin',
                                'image_url': 'https://1234567890.jpg',
                                'id': '1234567890ABCDEF',
                                'created_at': '2024-02-14T19:57:47',
                                'updated_at': '2024-02-14T19:57:47',
                                'city': 'Benin city',
                                '__class__': 'School'
                        }

SERVICE:
        --> GET, '/services': This returns a list of all the services
                res: [
                        {
                            "__class__": "Service", 
                            "category_id": "d46cbb67-1dc5-4018-abdb-b898105e33c3", 
                            "created_at": "2023-05-10T14:33:13", 
                            "description": "I provide the best service",
                            "name": "Cinderella Beauty Salon",
                            "id": "123456789", 
                            "image1": "https://123456789.jpg", 
                            "image2": "https://123456789.jpg", 
                            "image3": "https://123456789.jpg, 
                            "image4": "https://123456789.jpg, 
                            "image5": "https://123456789.jpg, 
                            "owner_id": "123456789", 
                            "updated_at": "2023-05-10T14:34:18"
                        },
                        ...
                    ]
                    request can also have query strings, example: '/services?limit=12&cursor=123456789&nav=prev'
                    where limit = number of services to return
                          cursor (optional) = id of the last service to count from, starts from the begining by default
                          nav (optional) = direction of count, forward by default, backward if set to 'prev'
        --> *GET, '/services/<service_id>': This returns a service based on id
                res: {
                        "__class__": "Service", 
                        "category_id": "d46cbb67-1dc5-4018-abdb-b898105e33c3", 
                        "created_at": "2023-05-10T14:33:13", 
                        "description": "I provide the best service",
                        "name": "Cinderella Beauty Salon",
                        "id": "123456789", 
                        "image1": "https://123456789.jpg", 
                        "image2": "https://123456789.jpg", 
                        "image3": "https://123456789.jpg, 
                        "image4": "https://123456789.jpg, 
                        "image5": "https://123456789.jpg, 
                        "owner_id": "123456789", 
                        "updated_at": "2023-05-10T14:34:18"
                    }
        --> *GET, '/users/<user_id>/services': This returns the services associated with a user
                res: same as '/services'
        --> GET, '/service-categories/<cat_id>/services': This returns a list of all services in a category
                res: same as '/services'
        --> POST, '/service-search': This search for services based on some criteria
                req: {
                        "location": id (environment id) | "all" (for all locations),
                        "category_id": id (category id) | "all" (for all categories)
                    }
                res: same as '/services'
        --> *POST, '/services': This creates a new service
                req: {
                        "category_id": id,
                        "owner_id": id,
                        "description": str,
                        "name": str,
                        "image1": href,
                        "image2": href,
                        "image3": href,
                        "image4": href,
                        "image5": href
                    }
                res: same as '/services/<service_id>
        --> *PUT, '/services/<service_id>': This updates details of a service
                req: {
                        key1: value1,
                        key2: value2,
                        ...
                    }
                res: same as '/services/<service_id>
        --> *DELETE, '/services/<service_id>': This deletes a service
                res: {}

STREET:
        --> GET, '/streets/<street_id>': This returns a street
                res: {
                        "__class__": "Street", 
                        "created_at": "2023-06-22T10:49:24", 
                        "env_id": "5aa7f3d3-c049-4b41-af4d-93145f19c055", 
                        "id": "d19bd4e8-5eef-492d-89ff-6ab963a3675e", 
                        "name": "11th", 
                        "updated_at": "2023-06-22T10:49:24"
                    }
        --> GET, '/environments/<env_id>/streets': This returns a list of all the streets in an environment
                res: [
                        {
                            "__class__": "Street", 
                            "created_at": "2023-06-22T10:49:24", 
                            "env_id": "5aa7f3d3-c049-4b41-af4d-93145f19c055", 
                            "id": "d19bd4e8-5eef-492d-89ff-6ab963a3675e", 
                            "name": "11th", 
                            "updated_at": "2023-06-22T10:49:24"
                        }
                    ]

UPLOAD IMAGES
        --> *POST, '/upload_image': This enpoint uploads all images
                req: a formData containing {"file": <file_to_upload>,
                                            "folder": ["apartment-images" | "serviceImages" | "productImages" | "user_avatar", | 'userVerification],
                                            "fileName": * should be the id of what is been uploaded plus a suffix for ids of multiple images *}
                res: The url of the uploaded image (example: "https://example123456789.jpg)

USER
        --> *GET, '/user/profile: This returns the details of the requester
                res: {
                        "__class__": "User", 
                        "avatar": "https://ik.imagekit.io/nzohesnyo/user_avatar/134a6a57-dccd-410d-b14f-67dc40dae385_JlW743Bhh.jpg", 
                        "com_res": "aae21f5d-57e9-4239-a9f5-307878e7525b", 
                        "created_at": "2023-02-22T11:20:15", 
                        "email": "************************", 
                        "first_name": "John", 
                        "id": "134a6a57-dccd-410d-b14f-67dc40dae385", 
                        "isVerified": false, 
                        "last_name": "Doe", 
                        "note": "I apply all types of make ups. For all kinds of parties let me be your sure plug", 
                        "password": "********", 
                        "phone_no": "2348100883367",
                        "whatsapp_no": "2348100883367",
                        "rating": 4.0, 
                        "reset_code": null, 
                        "updated_at": "2023-03-05T09:22:10", 
                        "user_type": "sp"
                    }
        --> *GET, '/user/<user_id>': This returns the details of a user
                res: * same as '/user/profile'
        --> POST, '/users': This creates a new user and sends a verify link to the user email
                req: {
                        "first_name": str,
                        "last_name": str,
                        "email": str,
                        "password": str,
                        "phone_no": int,
                        "user_type": ['agent' | 'vendor' | 'sp' | 'regular']
                        "com_res": id
                        "avatar": href
                        "note"(optional): str
                    }
                res: {
                        "message": "Welcome <first_name>, please visit your email to complete your verification",
                        "token": <token_id>,
                        "first_name": <first_name>,
                        "id": <user_id>,
                        "user_type": <user_type>
                    }
        --> POST, '/auth/login': This creates a new session for the user
                req: {
                        "email": str,
                        "password": str
                    }
                res: * same as POST '/users'
        --> *PUT, '/users/<user_id>': This updates the details of a user
                req: {
                        key1: value1,
                        key2: value2,
                        ...
                    }
                res: *same as '/user/profile'
        --> *DELETE, '/users/<user_id>': This deletes a user with id user_id
                res: {}
        --> *DELETE, '/logout': This destroys a user session
                res: {"message": "You have been succesfully logged out"}
        --> POST, '/users/reset-password': This sends a reset code to the user email for password reset
                req: {"email": "johndoe@gmail.com"}
                res: "OTP sent, please check your mail
        --> POST, '/users/confirm-reset-code': This confirms the user inputted the correct code
                req: {"email": "johndoe@gmail.com", "code": "1234"}
                req: "code valid" (200) on success
                     "Code invalid" (400) on failure
        --> PUT, '/users/email': This changes the user password to a new password
                req: {"email": "johndoe@gmail.com", "password": <new_password>}
                res: {
                        "message": "Password changed successfully",
                        "id": <user_id>,
                        "user_type": ["agent" | "vendor" | "sp" | "regular"],
                        "token": <token_id>
                    }
        --> POST, '/users/verify': This is used to verify the profile of a user
                req: {'email': 'johndoe@gmail.com',
                        'first_name': 'John',
                        'last_name': 'Doe',
                        'id_number': 1980555555,
                        'face_image': 'https://face_image.jpeg',
                        'id_image': 'https://id_image.jpeg'}
                req: "User verification submitted successfully, please wait 24 hours for confirmation"